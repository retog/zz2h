@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix r2h: <http://rdf2h.github.io/2015/rdf2h#> .
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix s: <https://schema.org/>.
@prefix foaf: <http://xmlns.com/foaf/0.1/> .

<page> a r2h:Matcher ;
  r2h:triplePattern [    
    r2h:subject r2h:this;
    r2h:predicate s:headline;
  ];
  r2h:template [ 
    r2h:context r2h:Default;
    r2h:mustache '''
    <head>
      <title>{{s:headline}}</title>
    </head>
    <body>
        {{{:continue}}}
    </body>
'''
  ];
  r2h:before <genericFrame>.

<genericFrame> a r2h:Matcher ;  
  r2h:template [ 
    r2h:context r2h:Default;
    r2h:mustache '''
    <head>
      <link rel="stylesheet" href="/css/bootstrap.css" />
      <title>Resource {{.}}</title>
    </head>
    <body>
        {{{:continue}}}
    </body>
'''
  ];
r2h:before <title>.

<title> a r2h:Matcher ;
  r2h:triplePattern [    
    r2h:subject r2h:this;
    r2h:predicate dc:title;
  ];
  r2h:template [ 
    r2h:context r2h:Default;
    r2h:mustache '''<h2>{{dc:title}}</h2>
        {{{:continue}}}'''
  ];
  r2h:before <label>.

<label> a r2h:Matcher ;
  r2h:triplePattern [    
    r2h:subject r2h:this;
    r2h:predicate rdfs:label;
  ];
  r2h:template [ 
    r2h:context r2h:Default;
    r2h:mustache '''Label: {{rdfs:label}}<br/>
         {{{:continue}}}'''
  ];
  r2h:before <catchall>.
          
<name> a r2h:Matcher ;
  r2h:triplePattern [    
    r2h:subject r2h:this;
    r2h:predicate foaf:name;
  ];
  r2h:template [ 
    r2h:context r2h:Default;
    r2h:mustache '''Name: {{foaf:name}}<br/>
         {{{:continue}}}'''
  ];
  r2h:before <label>.  

<catchall> a r2h:Matcher ;
  r2h:template [ 
    r2h:context r2h:Default;
    r2h:javaScript '''function(n) {
        var result = "";
        //alert(n.graph);
        //alert(n.node);
        var nodesToRender = [];
        var renderedNodesToId = new Object();
        nodesToRender.push(n.node);
        while (nodesToRender.length > 0) {
           var node = nodesToRender.pop();
           result += '<table id="'+node+'" class="table table-bordered">';
           result += '<thead><tr><th colspan="2">subject: '+node+'</th></tr>';
           result += '<tr>';
           result += '<th style="width:50%;">predicate</th>';
           result += '<th>object</th></tr></thead>';
           result += '<tbody>';
           var s = n.graph.filter(function(t) {return t.subject.equals(node)}).toArray();
           s.forEach(function(t) {
            result += '<tr><td>'+t.predicate+'</td><td>'+t.object+'</td></tr>';
           });
           result += '</tbody>';
           result += '</table>';
        };
        return result;
    }'''
  ].

